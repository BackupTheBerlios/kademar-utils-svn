#!/bin/bash

#
# Script per crear el menu del grub a la instalada
#  amb detecció de sistemes operatius
#
#  Inspirat en Morphix i Debian Installer / Grub Installer / Update Grub
#
# Adonay Sanz Alsina - 16 juny 2008 - GPL 2.0 or higher
#
# Modified 06-02-09 - EXT4 Support



. /tmp/instalador-environment


#####
##   FUNCITIONS
#####

# Usage: convert os_devicegrub-probe --device-map=
# Convert an OS device/PARTITION to the corresponding GRUB drive.
convert () {
    param=$1
    particio=${param%%[0-9]*}
    numero=${param##*[a-z]}
	if ! test -e ${device_map} ; then
		echo quit | grub --batch --no-floppy --device-map=${device_map} > /dev/null
	fi
    particio=`grep $particio ${device_map}  | sed s-[\(\)]--g | awk ' { print $1 } '`

  #if it's null it's because device.map now it's written with storage.serial instead block.device
   if [ -z "$particio" ]; then
    particio=${param%%[0-9]*} #read again sda
    halinfo /dev/$particio "storage.serial"
    particio=$halinfovar  #and get result
    particio=`grep $particio ${device_map}  | sed s-[\(\)]--g | awk ' { print $1 } '`
   fi

#  If partition exists on device.map, write it
    if [ -n "$particio" ]; then
        if [ -n "$numero" ]; then
            numero=",$(($numero - 1))"
        fi
	    echo "($particio$numero)"
    fi
}

# FUNCTION GREP HAL INFO UUID #
halinfo(){
	# $1 = /dev/sda4  (dispositiu a analitzar)
	
	halinfovar=""
	
	udi="`hal-find-by-property --key block.device --string $1`"
	
	key="volume.uuid"

	[ "$2" = "storage.serial" ] && key="storage.serial"
	
	halinfovar="`hal-get-property --udi $udi --key  $key`"

}


#Add windows or Mac entry to menu.lst
addwinmactomenu(){
	#  /dev/sda1 "mac os x" "macosx"
	#  "$device" "$name" "$shortname"
	
	device=$(convert $1)
	hd=${1%%[0-9]*} #Dejamos  /dev/sda1 -> /dev/sda
	hd=$(convert $hd)  #Convertimos a grub  (hd0)
	
	echo "title $2
root $device
chainloader +1
map $hd (hd0)" >> $menulist

}

# Add Linux Grub entry to menu.lst
addlinuxgrubtomenu(){
	# $1 = sda1
	# $2 = /tmp/particions-arrancables_sda1-grub
	
	#Find real device
	device=$(convert /dev/$1)
	root="root $device"
	
	trobat=no
	titleprocessat=no
	echo  >> $menulist
	
	cat "$2" | while read line
	do
	
		#Busca el primer title
		paraula=`echo $line | awk ' { print $1  } '`
		if [ "$paraula" = "title" -a "$titleprocessat" = "no" ]; then
			trobat=si
		else
			[ "$paraula" = "title" -a "$titleprocessat" = "si" ] && trobat=no
		fi
		
		# A partir del primer title, busca el les linies de configuracio
		# i afegeix'les al nou menu.lst
		# Utilitzar la linia que digui root, amb el root real del nou sistema que hem trobat amb el convert
		if [ "$trobat" = si ]; then
			case "$paraula" in
				title*)
					echo $line  >> $menulist
					titleprocessat="si"
				;;
				
				root*)
					echo $root  >> $menulist
				;;
				
				initrd*|kernel*)
					echo $line  >> $menulist
				;;
			esac 
		fi
	
	done
	
	echo "savedefault" >> $menulist
	echo "boot" >> $menulist
}

# Add Linux Lilo entry to menu.lst
addlinuxlilotomenu(){
	# $1 = sda1
	# $2 = /tmp/particions-arrancables_sda1-lilo
	
	#Find real device
	device=$(convert /dev/$1)
	root="root $device"
	
	trobat=no
	titleprocessat=no
	
	cat "$2" | while read line
	do
	
		#A partir de la paraula  IMAGE, considerem que hem trobat el que buscavem
		paraula=`echo $line | awk ' { print $1  } '`
	
		if [ "$paraula" = "image" -a "$titleprocessat" = "no" ]; then
			trobat=si
		else
		#I a la que hem trobat el següent image, vol dir que ja es un altre, i no ens interessa
			if [ "$paraula" = "image" -a "$titleprocessat" = "si" ]; then
				trobat=no
				#Es ara el moment de escriure lo trobat, pq ja ha canviat de entrada del menu
				echo  >> $menulist
				echo "title $label" >> $menulist
				echo "$root" >> $menulist
				echo "kernel $image" >> $menulist
				echo "initrd $initrd" >> $menulist
				echo "savedefault" >> $menulist
				echo "boot" >> $menulist
			fi
		fi
		
		#Busca en el fitxer
		if [ "$trobat" = si ]; then
			case "$paraula" in
				image*)
					image="`echo "$line" | sed s-"image "--g`"
					titleprocessat="si"
				;;
				
				label*)
					label="`echo "$line" | sed s-"label "--g`"
				;;
				
				initrd*)
					initrd="`echo "$line" | sed s-"initrd "--g`"
				;;
			esac 
		fi
		
	done
}


# Selects if grub or lilo and send to real process function
addlinuxtomenu(){
#  /dev/sda1 "kademar 2.0" "linux"
#  "$device" "$name" "$shortname"

# /tmp/particions-arrancables_sda1-lilo

#  $1 = /dev/sda1
dev="`echo $1 | sed s-/dev/--g`"  #dev=sda1
file="`ls /tmp/particions-arrancables_$dev* 2>/dev/null`"
if [ -n "$file" ]; then
    tipus="`echo $file | cut -d- -f3`"
    case "$tipus" in
    grub)
        addlinuxgrubtomenu "$dev" "$file"
    ;;
    lilo)
        addlinuxlilotomenu "$dev" "$file"
    ;;
    esac
fi

}



# Simple shell grep
stringinfile(){
case "$(cat $2)" in *$1*) return 0;; esac
return 1
}

# same for strings
stringinstring(){
case "$2" in *$1*) return 0;; esac
return 1
}

# Reread boot command line; echo last parameter's argument or return false.
getbootparam(){
stringinstring " $1=" "$CMDLINE" || return 1
result="${CMDLINE##*$1=}"
result="${result%%[     ]*}"
echo "$result"
return 0
}

# Check boot commandline for specified option
checkbootparam(){
stringinstring " $1" "$CMDLINE"
return "$?"
}
#####
##   END FUNCITIONS
#####



#####
##   VARIABLES
#####
CMDLINE=`cat /proc/cmdline`
device_map="$DESTI/boot/grub/device.map"
menulist="$DESTI/boot/grub/menu.lst"
rm -f $menulist

#Versió del Kernel
if [ -z "$cadi" ]; then
#      execucio per part del Instalador
     nucli="`uname -r`"
     version=`cat /etc/kademar-release`
     . /etc/kademar/config  #import kademar_type
#      initrd="initrd /boot/initrd.img-$nucli"
else
#      execucio en el restauragrub del CADI
     nucli=$(cd $DESTI/boot ; for i in `ls -1 vmlinuz* | sed s/vmlinuz-//g`; do echo $i; break; done)
     version=`cat $DESTI/etc/kademar-release 2>/dev/null`
     . $DESTI/etc/kademar/config  #import kademar_type

fi

#use initrd if found one
initrd="`cd $DESTI/boot ; ls initrd*$nucli 2>/dev/null`"
[ -n "$initrd" ] && initrd="initrd /boot/$initrd"


particions_arrancables=/tmp/particions-arrancables
root=$particioarrel  #/dev/hda1
boot=$(convert $particioarrel)  #(hd0)

image="/boot/vmlinuz-$nucli"
title="kademar $version $kademar_type GNU/Linux"

#Si hi ha particions arrancables que no siguin la particio arrel
if [ -n "`grep -v $particioarrel $particions_arrancables`" ]; then
	timeout=10
else
	timeout=1
fi

#####
##   END VARIABLES
#####


#BEGIN REAL MENU.LST CREATION WORK
vga=$(getbootparam vga)  #vga=791 de com ha engegat
[ -n "$vga" ] && vga="vga=$vga"

apm=$(getbootparam apm)  #apm=power-off de com ha engegat
[ -n "$apm" ] && apm="apm=$apm"

#Support for resume/suspend/hibernate partition (now uses swap partition)
#Grep UUID information
uidsw=`vol_id $particioswap 2>/dev/null| grep "ID_FS_UUID=" | cut -d= -f2`

# If had UUID information, and initrd it's created, use it
if [ -n "$uidsw" -a "$make_initrd" = "yes" ]; then
	particioswap="UUID=$uidsw"
fi

[ -n "$particioswap" ] && resume="resume=$particioswap"


#ext4 support
if [ "$fsparticioarrel" = ext4 ]; then
    ext4="rootfstype=ext4"
fi

#support to other configurations
moreoptions=""
for i in noapm noacpi noapic nosmp apm nomce mce nopat nopae startjoomla 
do
    a=$(checkbootparam $i ; echo $?)  #vga=791 de com ha engegat
    [ "$a" = 0 ] && moreoptions="$moreoptions $i"
done

#Define standard User params - accessibility free - to create more accessibility options menu
user_params_no_accessibility="splash=silent quiet CONSOLE=/dev/tty1 ro $apm $resume $ext4 $moreoptions"

for i in startcsicappgroup1 startcsicappgroup2 startcsicappgroup3 startcsicappgroup4 nox adriane screenread orca
do
    a=$(checkbootparam $i ; echo $?)  #vga=791 de com ha engegat
    [ "$a" = 0 ] && moreoptions="$moreoptions $i"
done

#Define standard User params with accessibility already configured
user_params="splash=silent quiet CONSOLE=/dev/tty1 ro $vga $apm $resume $ext4 $moreoptions"



#Grep UUID information
uid=`vol_id $particioarrel 2>/dev/null | grep "ID_FS_UUID=" | cut -d= -f2`

# If had UUID information, and initrd it's created, use it
if [ -n "$uid" -a "$make_initrd" = "yes" ]; then
	root="UUID=$uid"
fi


#Support for GFX-Grub
cd $DESTI/boot/grub/
message="`for i in $(ls -1 message.* 2>/dev/null); do echo $i ; break; done `"
if [ -e "$message" ]; then
    gfxgrub="gfxmenu /boot/grub/$message"
fi


# Mantas-> I don't know what IFS is, but after this newlines are written ;)
# IFS és el tipus de salt de linia, que necessita ser d'un determinat tipus
# pq el grub l'entengui. Per això, python no ho pot fer
newline="
"
IFS="$newline"

IFS="$OLDIFS"


template="# See www.gnu.org/software/grub for details
# By default, boot the first entry
default 0
# Boot automatically after 5 seconds
timeout $timeout

# Pretty colours
color cyan/blue white/blue

$gfxgrub

# ============
# Example Linux
# title kademar
# root (hd0,0)
# kernel /boot/vmlinuz-2.6.17 root=/dev/sda1 ro vga=791 nomce
# initrd /boot/initrd.img-2.6.17
# ============
# Example MacOSX/Windows
# title Mac
# root (hd1,0)
# chainloader +1
# map (hd1) (hd0)
# ============

# kernel path-to-kernel root=rootdevice kernelarguments
title $title
root $boot
kernel $image root=$root $user_params
$initrd

# This is a divider, added to separate the menu items below from the Debian
# ones.

"
# Add Linux Grub entry to menu.lst

#Write menu & first entry
echo $template > $menulist


#
#  Add other SO to menu.lst
#

#Agafem tots els SO menys el de la particio en la que l'hem instal·lat.
# os-prober
# cat $particions_arrancables 
cat $particions_arrancables  | grep -v $particioarrel | grep -vi "No volume groups" | while read line
do
	echo "$line"| cut -d: -f1
	device=`echo "$line" | cut -d: -f1`  #device=/dev/sda1
	name=`echo "$line" | cut -d: -f2`  #name=MS Windows xp
	shortname=`echo "$line" | cut -d: -f4 | tr '[A-Z]' '[a-z]'`  #name=windows
	case "$shortname" in
		linux*)
			addlinuxtomenu "$device" "$name" "$shortname"
		;;
		chain*|windows*|mac*|*)
			addwinmactomenu "$device" "$name" "$shortname"
		;;
	esac
done

#Finish adding automagick kernel list kopt option, compatibility with debian   update-grub  command

finish="
### BEGIN AUTOMAGIC KERNELS LIST
## lines between the AUTOMAGIC KERNELS LIST markers will be modified
## by the debian update-grub script except for the default options below

## DO NOT UNCOMMENT THEM, Just edit them to your needs

## ## Start Default Options ##
## default kernel options
## default kernel options for automagic boot options
## If you want special options for specific kernels use kopt_x_y_z
## where x.y.z is kernel version. Minor versions can be omitted.
## e.g. kopt=root=/dev/hda1 ro
##      kopt_2_6_8=root=/dev/hdc1 ro
##      kopt_2_6_8_2_686=root=/dev/hdc2 ro
# kopt=root=$root $user_params_no_accessibility $vga

### END DEBIAN AUTOMAGIC KERNELS LIST
"

echo $finish >> $menulist

#Config grub2
echo "# This file is sourced by update-grub, and its variables are propagated
# to its children in /etc/grub.d/
GRUB_DEFAULT=0
GRUB_TIMEOUT=5
GRUB_DISTRIBUTOR=\`lsb_release -i -s 2> /dev/null || echo Debian\`
GRUB_CMDLINE_LINUX=\"$user_params_no_accessibility $vga\"

# Uncomment to disable graphical terminal (grub-pc only)
#GRUB_TERMINAL=console

# Uncomment if you don't want GRUB to pass \"root=UUID=xxx\" parameter to Linux
#GRUB_DISABLE_LINUX_UUID=true" > "$DESTI/etc/default/grub"