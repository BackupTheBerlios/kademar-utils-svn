#!/bin/bash
### BEGIN INIT INFO
# Provides:          startinstalada
# Required-Start:    
# Required-Stop:     
# Default-Start:     S
# Default-Stop:      
# Short-Description: start & configure livecd
# Description:       First start
### END INIT INFO

# Engegada i configuració de la kademar
# (C) Adonay Sanz <adonay@kademar.org> 2005
# Licensed under GNU/GPL 2.0 or higher
#
# Special Thanks to
#   Klaus Knopper <knopper@knopper.net>
# Script extensively "inspired" on KNOPPIX
#
# It's the first script executed before initrd on Live-CD


PATH="/bin:/sbin:/usr/bin:/usr/sbin:/usr/X11R6/bin"
export PATH

umask 022

# ANSI COLORS
CRE="
[K"
NORMAL="[0;39m"
# RED: Failure or error message
RED="[1;31m"
# GREEN: Success message
GREEN="[1;32m"
# YELLOW: Descriptions
YELLOW="[1;33m"
# BLUE: System messages
BLUE="[1;34m"
# MAGENTA: Found devices or drivers
MAGENTA="[1;35m"
# CYAN: Questions
CYAN="[1;36m"
# BOLD WHITE: Hint
WHITE="[1;37m"


###############
#  FUNCTIONS  #
###############

numero_final="`stty size | awk '{ print $2 } '`"
numero_final=$(($numero_final / 8))
escriu_resultat(){
#Crides la funcio amb 2 parametres: 1r la sortida i el 2n el reductor pq surti en la mateixa linia el resultat
contador="0"
[ -n "$2" ] && let "contador += $2"
while true
do
	if [ "$contador" != "$numero_final" ]; then
 	echo -n -e "\t"
	let "contador += 1"
	else
		if [ "$1" = "0" ]; then
# 		echo -n " "
		echo "${GREEN}[  OK  ]${NORMAL}"
		break
		else
		echo "${RED}[  NO  ]${NORMAL}"
		break
		fi
	fi
done
}

# Simple shell grep
stringinfile(){
case "$(cat $2)" in *$1*) return 0;; esac
return 1
}

# same for strings
stringinstring(){
case "$2" in *$1*) return 0;; esac
return 1
}

# Reread boot command line; echo last parameter's argument or return false.
getbootparam(){
stringinstring " $1=" "$CMDLINE" || return 1
result="${CMDLINE##*$1=}"
result="${result%%[ 	]*}"
echo "$result"
return 0
}

# Check boot commandline for specified option
checkbootparam(){
stringinstring " $1" "$CMDLINE"
return "$?"
}

#####################
# END OF FUNCTIONS  #
#####################

#kademar Version
versio=`cat /etc/kademar-release`
echo "${YELLOW}    ***************************${NORMAL}"
echo "${YELLOW}    *   Heliox GNU/Linux $versio  *${NORMAL}"
echo "${YELLOW}    ***************************${NORMAL}"
echo

# echo -n "${BLUE}Muntant Sistema de Fitxers Virtuals${NORMAL}" ; 
# /etc/init.d/mountvirtfs start >/dev/null 2>&1
#  ; escriu_resultat $? 3

#Muntant Sistema de Fitxers Virtuals
#Substituit l'script original per les ordres reals que executa
mount -t proc none /proc
mount -t sysfs none /sys
# mount -t devpts none /dev/pts
mount -t usbfs none /proc/bus/usb 2>/dev/null
# mount -t ramfs none /var/run
# mount -t ramfs none /tmp

# / must be read-write in any case, starting from here
mount -o remount,rw / 2>/dev/null

rm -f /etc/mtab
ln -s /proc/mounts /etc/mtab


#  # Mount more ramdisks, it's safer to split these than only having ONE /ramdisk
# [ -d /var/run ]  || mkdir /var/run
# mount -t tmpfs  -o rw,size=10M,nosuid,nodev tmpfs /var/run
# [ -d /var/lock ] || mkdir /var/lock
# mount -t tmpfs  -o rw,size=10M,nosuid,nodev tmpfs /var/lock
# [ -d /var/log ]  || mkdir /var/log
# mount -t tmpfs -o rw,size=100M,nosuid,nodev tmpfs /var/log
# [ -d /tmp ]      || mkdir /tmp
# mount -t tmpfs -o rw,mode=1777,size=1G,exec,nosuid,nodev tmpfs /tmp

 # Should exist
 :> /var/run/utmp
 :> /var/log/wtmp


# Recreate var/tempfiles directory structure on tmpfs
# for i in $(cd /mnt/live/memory/images/kademar.lzm && find var/run var/lock var/log var/run/speech-dispatcher -type d); do
# 	mkdir -p /"$i"
# done
# chmod 1777 /var/log/apt /var/run/dbus 2>/dev/null
# 
# #Speetch-dispatcher hack
# if [ -e /mnt/live/memory/images/kademar.lzm/var/run/speech-dispatcher ]; then
# 	rm -fr /var/run/speech-dispatcher
# 	cp -a /mnt/live/memory/images/kademar.lzm/var/run/speech-dispatcher /var/run
# fi


#Hack per utilitzar els RamFS creats sense problemes
# chmod 777 /tmp -R &
# chmod 777 /tmp &

rm -fr /var/log/speech-dispatcher /var/run/speech-dispatcher

( mkdir -p /var/log/speech-dispatcher
chmod 777 /var/log/speech-dispatcher
for i in alsa cups dbus hal hplip samba sshd sudo xauth
do
	mkdir -p /var/run/$i
done ) &

CMDLINE=`cat /proc/cmdline`

if checkbootparam "maxdebug"; then
	set -x
fi

#Inclusió del FUSE per escriptura en NTFS
modprobe fuse 2>/dev/null

#Assegurada detecció de ratolins
modprobe psmouse 2>/dev/null

user=Heliox

#Locale definition
locale_file="/etc/default/locale"

#Load configured locales
. /etc/default/locale

#Export it now, in order to get translated orders that can be translated
export LANG=$LANG LANG COUNTRY CHARSET TZ

#Refresh console with new parameters
[ -e /etc/init.d/console-screen.sh ] && /etc/init.d/console-screen.sh restart
[ -e /etc/init.d/console-setup ] && /etc/init.d/console-setup start

#load sysctl.conf params
/etc/init.d/procps start

#Load next messages
case "$LANG" in
ca*)
. /usr/share/kademar/scripts/engegada/kademar-inici_lang-ca
;;
es*)
. /usr/share/kademar/scripts/engegada/kademar-inici_lang-es
;;
*)
. /usr/share/kademar/scripts/engegada/kademar-inici_lang-en
;;
esac

#########################
# END LOCALE DEFINITION #
#########################



[ -n "`echo $CMDLINE | grep -i debug`" ] && DEBUG="si"

echo -n "${BLUE}$miss_rellotge${NORMAL}" ; /etc/init.d/hwclockfirst.sh start >/dev/null 2>&1 ; escriu_resultat $? $num_rellotge

##############################
# BASIC SYSTEM CONFIGURATION #
##############################

# No kernel messages while probing modules
[ "$DEBUG" != "si" ] && echo "0" > /proc/sys/kernel/printk


 # Writeback every 30 secs maximum
#  echo 3000 > /proc/sys/vm/dirty_writeback_centisecs
#  # Don't swap unless necessary
#  echo 20 > /proc/sys/vm/swappiness
#  echo 50 > /proc/sys/vm/vfs_cache_pressure
#  echo 3  > /proc/sys/vm/drop_caches
/etc/init.d/procps start #set sysctl.conf vars
 # Some programs seem to require incredible amounts of memory, and
 # will just crash if overcommit is set to off.
#  echo 1 > /proc/sys/vm/overcommit_memory


# Ignore these signals: INT, TERM, SEGV
[ "$DEBUG" != "si" ] && trap "echo ; echo $no_trap" 2 3 11


###
##  Start SPLASHY
###
# if [ -e /sbin/splashy ]; then
# 	modprobe fbcon 2>/dev/null
# 	modprobe vesafb 2>/dev/null
# 
# test -c "/dev/fb0" ||
# 	mknod /dev/fb0 c 29 0
# for i in 0 1 2 3 4 5 6 7 8; do
# 	test -c "/dev/tty$i" ||
# 		mknod /dev/tty$i c 4 $i
# 	done
# 
# # [ tdykstra ]
# # This is supposed to replace the test for vga=
# # on the command line. Didn't test it much...
# 	grep -q '\(VESA\|VGA\)' /proc/fb || exit
# 
# 	/sbin/splashy boot &
# fi




# start_udev: start udevd and initialize only to the point where we can start X,
# then launch complete hardware detection asynchronously.
#Completly Knoppix Stolen  :-[
start_udev(){
 mountpoint -q /dev || mount -t tmpfs -o rw,size=20M,exec,dev udev /dev
 mkdir -m 755 -p /dev/.udev/db /dev/.udev/queue /dev/shm /media /mnt
 ln -snf /proc/self/fd /dev/fd
 ln -snf /proc/self/fd/0 /dev/stdin
 ln -snf /proc/self/fd/1 /dev/stdout
 ln -snf /proc/self/fd/2 /dev/stderr
 ln -snf /proc/kcore /dev/core
 ln -snf /proc/asound/oss/sndstat /dev/sndstat
 [ -x /dev/MAKEDEV ] || ln -sf /sbin/MAKEDEV /dev/MAKEDEV
 ln -snf cloop0 /dev/cloop
 ( cd /lib/udev/devices ; cp -a null zero init* console tty[1-9]* fb* isdn* capi* loop* /dev/ 2>/dev/null )
 mount -t tmpfs -o rw,size=1G,mode=1777 tmpfs /dev/shm
 mkdir -m 1777 -p /dev/shm/network
 echo > /proc/sys/kernel/hotplug
 # Start udev and load only drivers that are essential for Audio, X and Networking
 udevd --daemon && \
    udevadm trigger --subsystem-match=audio --subsystem-match=tty --subsystem-match=pci --subsystem-match=graphics --subsystem-match=input
 udevadm settle
 # Now load remaining drivers in background
 exec udevadm trigger --subsystem-nomatch=audio --subsystem-nomatch=tty --subsystem-nomatch=pci --subsystem-nomatch=graphics --subsystem-nomatch=input &
}



#Udev Start
echo "${BLUE}$miss_udev${NORMAL}" ; start_udev
# ; /etc/init.d/udev start >/dev/null 2>&1
# ; escriu_resultat $? $num_udev

/etc/init.d/module-init-tools start


# Included on latest KERNEL 2.6.33
#kademar  compcache
ccachedir="/lib/modules/`uname -r`/kernel/fs/compcache"
if [ -e "$ccachedir" ]; then
   echo "Found CompCache"
   for i in lzo1x_compress.ko lzo1x_decompress.ko tlsf.ko compcache.ko
   do
      insmod "$ccachedir/$i" 2>/dev/null
   done
   insmod "$ccachedir/compcache.ko" ccache_size_kbytes=128000
#    debug_shell
fi

#kademar  compcache
[ -e /dev/ramzswap0 ] && swapon /dev/ramzswap0  2>/dev/null && ramz=true && echo "Activating CompCache support 1"

#be sure to be mounted
# mkdir -p /dev/shm
# mount -t tmpfs shm /dev/shm
# mkdir -p /dev/pts
# mount -t devpts -o rw,mode=1777 /dev/pts /dev/pts
/etc/init.d/mountdevsubfs.sh start

########### SPLASHY
#######
if [ -z "`grep nox /proc/cmdline`" ]; then
	# [ ! -e /dev/fb0 ] && mknod /dev/fb0 c 29 0
	[ -e /etc/init.d/splashy ] && /etc/init.d/splashy start
	[ -e /etc/init.d/splashutils ] && /etc/init.d/splashutils start
fi
#######
########### SPLASHY

#kademar  compcache
[ "$ramz" != true  ] && [ -e /dev/ramzswap0  ] && swapon /dev/ramzswap0  2>/dev/null && ramz=true && echo "Activating CompCache support 2"

# echo -n "${BLUE}$miss_moduls_1${NORMAL}" ; /etc/init.d/module-init-tools start >/dev/null 2>&1 ; escriu_resultat $? $num_moduls_1

########### SPLASHY
#######
# [ -n "`pidof splashy`" ] && /etc/init.d/splashy10 start
#######
########### SPLASHY


# echo -n "${BLUE}$miss_moduls_2${NORMAL}" ; /etc/init.d/modutils start >/dev/null 2>&1 ; escriu_resultat $? $num_moduls_2

########################

# Set hostname
hostname --file /etc/hostname

# hwclock uses the TZ variable
# TZ="Europe/Madrid"
# export TZ
#hwclock -u -s

# KTZ="$(getbootparam tz 2>/dev/null)"
# [ -f "/usr/share/zoneinfo/$KTZ" ] && TZ="$KTZ"
# rm -f /etc/localtime
# cp "/usr/share/zoneinfo/$TZ" /etc/localtime

# Bring up loopback interface now
ifconfig lo 127.0.0.1 up

#services needed to start speech-dispatcher
/etc/init.d/dbus start
/etc/init.d/hal start



#
# Accessibility Support - SCREEN READER 
#
#  scrread or screenread   cmdline support
[ -n "`grep scrread /proc/cmdline`" ] && scrread="true"
[ -n "`grep screenread /proc/cmdline`" ] && scrread="true"

#Configuration for Heliox
if [ -e /etc/init.d/pulseaudio -a -n "`grep heliox /etc/kademar/config-livecd`" ]; then
    [ -e /etc/init.d/pulseaudio ] && su -c "pulseaudio -D" $user
    [ -e /etc/init.d/festival ] && /etc/init.d/festival start
#     if [ -e /etc/init.d/speech-dispatcher ]; then
#         /etc/init.d/speech-dispatcher start
#     else
#         [ -n "`which speech-dispatcher`" ] && speech-dispatcher -d
#     fi

    [ -n "`which adriane-screenreader`" ] && adriane-screenreader

  #Stop SBL (real screenreader) if not need it 
    [ -z "$scrread" ] && /etc/init.d/sbl stop

  #renice processes to have better responsibiness
    pidofpulse=`pidof pulseaudio`
    pidoffestival=`pidof festival`
    pidofspeech=`pidof speech-dispatcher`

    [ -n "$pidofpulse" ] && renice -5 $pidofpulse
    [ -n "$pidoffestival" ] && renice -5 $pidoffestival
    [ -n "$pidofspeech" ] && renice -5 $pidofspeech

fi

#
# END Accessibility Support
#




#######################

# Munta tots els dispositius
# echo -n "${BLUE}$miss_hdparm${NORMAL}" ; /etc/init.d/hdparm start >/dev/null 2>&1 ; escriu_resultat $? $num_hdparm

########### SPLASHY
#######
# [ -n "`pidof splashy`" ] && /etc/init.d/splashy20 start
#######
########### SPLASHY

#kademar  compcache
[ "$ramz" != true  ] && [ -e /dev/ramzswap0  ] && swapon /dev/ramzswap0  2>/dev/null && ramz=true && echo "Activating CompCache support 2"

# Munta tots els dispositius
# echo -n "${BLUE}$miss_fstab${NORMAL}" ; sh /usr/share/kademar/scripts/engegada/fstabcreation-inicial-livecd >/dev/null 2>&1 ; escriu_resultat $? $num_fstab

# echo -n "${BLUE}$miss_muntant_1${NORMAL}" ; /etc/init.d/mountall.sh start >/dev/null 2>&1 ; escriu_resultat $? $num_muntant_1

#Enable Swap if exists
[ -n "`grep -i swap /etc/fstab`" ] && swapon -a


##################################
# END BASIC SYSTEM CONFIGURATION #
##################################

echo " ${GREEN}$miss_kernel${YELLOW}$(uname -r)${NORMAL}"

# Print CPU info
# echo -n "${GREEN}"
# awk -F: '/^processor/{printf " Procesador"$2" es un "};/^model name/{printf $2};/^vendor_id/{printf vendor};/^cpu MHz/{printf " %dMHz",int($2)};/^cache size/{printf ","$2" Cache"};/^$/{print ""}' /proc/cpuinfo 2>/dev/null
# echo -n "${NORMAL}"

########### SPLASHY
#######
# [ -n "`pidof splashy`" ] && /etc/init.d/splashy30 start
#######
########### SPLASHY

# First: PCMCIA Check/Setup
# This needs to be done before other modules are being loaded by hwsetup
if checkbootparam "nopcmcia"; then
	echo " ${BLUE}$miss_pcmcia_no${NORMAL}"
else
	#Hack pels Sony Vaio, es queda penjat.
	#Amb sipcmcia en el boot, força la carrega
	case "$CMDLINE" in *' sipcmcia '*) sipcmcia="yes"; ;; esac	
	#Hack pels Sony Vaio, es queda penjat.
	if [ "$sipcmcia" = "yes" -o -z "`lspci | grep '0000:06:03.0' | egrep 'PCI7420'`" ] ; then
# 		modprobe pcmcia_core >/dev/null 2>&1
		# Try Cardbus or normal PCMCIA socket drivers
# 		modprobe yenta_socket >/dev/null 2>&1 || modprobe i82365 >/dev/null 2>&1 || modprobe tcic >/dev/null 2>&1
# 		if [ "$?" = "0" ]; then
			echo " ${GREEN}$miss_pcmcia_1${NORMAL}"
			/etc/init.d/pcmciautils start >/dev/null 2>&1 &
# 		fi
	fi
fi



########### SPLASHY
#######
# [ -n "`pidof splashy`" ] && /etc/init.d/splashy40 start
#######
########### SPLASHY


# # Check for blind option or brltty
# BLIND=""
# checkbootparam "blind" && BLIND="yes"
# BRLTTY="$(getbootparam brltty 2>/dev/null)"
# 
# if [ -n "$BLIND" -o -n "$BRLTTY" ]; then
# if [ -x /sbin/brltty ]; then
# # Blind option detected, start brltty now.
# CMD=brltty
# BRLTYPE=""
# BRLDEV=""
# BRLTEXT=""
# if [ -n "$BRLTTY" ]; then
# # Extra options
# BRLTYPE="${BRLTTY%%,*}"
# R="${BRLTTY#*,}"
# if [ -n "$R" -a "$R" != "$BRLTTY" ]; then
# BRLTTY="$R"
# BRLDEV="${BRLTTY%%,*}"
# R="${BRLTTY#*,}"
# if [ -n "$R" -a "$R" != "$BRLTTY" ]; then
# BRLTTY="$R"
# BRLTEXT="${BRLTTY%%,*}"
# R="${BRLTTY#*,}"
# fi
# fi
# fi
# [ -n "$BRLTYPE" ] && CMD="$CMD -b $BRLTYPE"
# [ -n "$BRLDEV" ] && CMD="$CMD -d $BRLDEV"
# [ -n "$BRLTEXT" ] && CMD="$CMD -t $BRLTEXT"
# echo " ${BLUE}$miss_braile${GREEN}${CMD}${NORMAL}"
# ( exec $CMD & )
# sleep 2
# fi
# fi

#Engega Serveis
	
[ -e /etc/init.d/alsa-utils ] && echo -n "${BLUE}$miss_alsa${NORMAL}" ; /etc/init.d/alsa-utils start >/dev/null 2>&1 ; escriu_resultat $? $num_alsa
#         no support a pulseaudio pq no tira desd aquí, mejor usar el rc2.d

# Munta tots els dispositius
# echo -n "${BLUE}$miss_muntant_2${NORMAL}" ; sh /usr/share/kademar/scripts/mnt-kademar 2>/dev/null 2>&1 ; escriu_resultat $? $num_muntant_2



#EEEpc Support
 for i in camera cardr wlan; do
  [ -r /sys/bus/platform/drivers/eeepc/eeepc/"$i" ] && echo 1 > /sys/bus/platform/drivers/eeepc/eeepc/"$i"
 done




########### SPLASHY
#######
# [ -n "`pidof splashy`" ] && /etc/init.d/splashy60 start
#######
########### SPLASHY

#Start network
/etc/init.d/networking start
/etc/init.d/policykit start


#kademar  compcache
ccachedir="/lib/modules/`uname -r`/kernel/fs/compcache"
if [ -e "$ccachedir" ]; then
   echo "Found CompCache"
   for i in lzo1x_compress lzo1x_decompress tlsf xvmalloc compcache
   do
      modprobe $i
   done
fi

#Check Graphic-Card Change
sh /usr/share/kademar/scripts/engegada/grafica-comprova

#kademar  compcache
[ -e /dev/ramzswap0 ] && swapon /dev/ramzswap0 && echo "Activating CompCache support"



# Restore kernel messages while probing modules
echo "6" > /proc/sys/kernel/printk

# Re-enable signals
trap 2 3 11
