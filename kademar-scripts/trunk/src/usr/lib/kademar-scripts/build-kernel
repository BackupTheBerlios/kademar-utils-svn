#!/bin/bash

#Elric Milon

if [ `whoami` == root  ]; then
	echo "Don't run that script as root!"
	exit 1
fi

. /usr/lib/kademar-scripts/sourcables/load_config

KVERSION=2.6.12.2
EXTRA_MODULES_LIST="unionfs.tar.bz2"

###################################################
####Functions definition part######################
###################################################

#Prepare GPG keys. If gpg key isn't found, get kernel gpg key from internet
if [ -z "`gpg --list-keys | grep 517D0F0E`" ]; then
	gpg --recv-keys 517D0F0E
fi

checkkernel()
{
	if [ -e linux-$KVERSION.tar.bz2 ]; then
		if [ ! -e linux-$KVERSION.tar.bz2.sign ]; then
			tip "Getting kernel package signature"
			wget http://www.kernel.org/pub/linux/kernel/v2.6/linux-$KVERSION.tar.bz2.sign
			ok "Done"
		fi
			tip "Verifying package integrity"
			gpg --verify linux-$KVERSION.tar.bz2.sign linux-$KVERSION.tar.bz2
				if [ $? != 0 ]; then
					error "Check failed
Please remove $KM_SRC_DIR/linux-$KVERSION.tar.bz2 
and try to run $0 again"
					exit 1
				fi
			ok "Done"
	fi
}	

#Usage gethttpfile URL
gethttpfile()
{
	if [ -z `echo "$1"| grep ^"http://"` ]; then
		error "gethttpfile: invalid argument: $1"
		exit 1
	else
		URL="$1"
	fi
	
	if [ ! -e .download-finished-`basename $URL` -o ! -e `basename $URL` ]; then
		tip "Downloading $URL"
		#just in case...
		rm -f .download-finished-`basename $URL` 2> /dev/null
		wget -c $URL 
		if [ $? != 0 ]; then
			error "Error downloading files, exiting"
			exit 1
		else
			touch .download-finished-`basename $URL`
		fi
	fi
	ok "Done"
}

#usage unpack file
unpack()
{
	if [ -e "$1" ]; then
		FILE=$1
	else
		error "File $1 does not exist, exiting"
		exit 1
	fi
	
	if [ -e .unpacked-`basename $FILE` ]; then 
		warn "already unpacked, skipping, if you removed unpacked files 
re-run this script after deleting
`pwd`/.unpacked-`basename $FILE`"
	else	
		unp $FILE > /dev/null
		if [ $? != 0 ]; then
			error "Error unpacking kernel source, exiting"
			exit 1
		fi
		touch .unpacked-`basename $FILE`
		ok "Done"
	fi
}

patchit()
{
	if [ -e "$1" ]; then
		PATCH="$1"
		if [ ! -e ".patched-`basename $PATCH`" ]; then
			tip "applying patch `basename $PATCH`"
			patch --dry-run --batch -p1 -s < ../squashfs2.1/linux-2.6.9/squashfs2.1-patch  2> /dev/null && \
			patch           --batch -p1 -s < ../squashfs2.1/linux-2.6.9/squashfs2.1-patch
			touch ".patched-`basename $PATCH`"
			ok "Done"
		else
			warn "Patch `basename $PATCH` already applied, 
If this is not correct, re-run this script after deleting
.patched-`basename $PATCH`"
		fi
	else
		error "Patch does not exist"
		exit 1
	fi

}

###################################################
####End of functions definition part###############
###################################################

cd $KM_SRC_DIR
if [ $? != 0 ]; then
	error "Error changing to kernel source dir, exiting"
	exit 1
fi

#wget http://www.kernel.org/pub/linux/kernel/v2.6/linux-$KVERSION.tar.bz2

tip "Getting Linux sources"
gethttpfile http://www.kernel.org/pub/linux/kernel/v2.6/linux-$KVERSION.tar.bz2

tip "Checking Linux package integrity"
checkkernel

tip "Downloading squashfs sources"
gethttpfile http://unc.dl.sourceforge.net/sourceforge/squashfs/squashfs2.1.tar.gz

tip "Unpacking kernel source."
unpack linux-$KVERSION.tar.bz2

tip "Unpacking squashfs source."
unpack squashfs2.1.tar.gz

tip "Patching Linux sources with squashfs patch"
cd linux-$KVERSION

patchit ../squashfs2.1/linux-2.6.9/squashfs2.1-patch
if [ $? != 0 ]; then
        error "Error patching Linux sources, exiting"
        exit 1
fi

echo "Using burnix default config to compile Linux"
cp /usr/lib/kademar-scripts/config_files/kernelconf .config
#make -s oldconfig

tip "Compiling Linux, please be patient :-)"
make -s -j`grep processor  /proc/cpuinfo | wc -l` 
if [ $? != 0 ]; then
        error "Error compiling Linux, exiting"
        exit 1
fi

rm -f ../*.deb

echo "Making Debian package"
make-kpkg  --rootcmd fakeroot kernel-image
if [ $? != 0 ]; then
        error "Error making Debian package, exiting"
        exit 1
fi

tip "Unpacking extra modules source"

pushd .. > /dev/null
mkdir modules 2> /dev/null
for x in "$EXTRA_MODULES_LIST"; do 
	unpack /usr/src/`basename $x`
done
popd > /dev/null

tip "Making extra modules package"

MODULE_LOC=$KM_SRC_DIR/modules make-kpkg  --rootcmd fakeroot modules_image 

mkdir -p $COMMON_DIR/kernel/
mv ../*.deb $COMMON_DIR/kernel/
