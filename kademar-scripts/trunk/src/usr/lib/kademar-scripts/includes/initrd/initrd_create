#!/bin/bash
# initrd_create:  make initrd rootdisk by using busybox
#
# Author:	  Tomas M. <http://www.linux-live.org>

# Modified by Adonay Sanz - kademar

#kademar
DEBUG=0

#kademar
WANTED_FIRMWARES="ql2"

#kademar
if [ "$2" != "" ]; then
   KERNEL="$2"
fi

#kademar
. /usr/lib/kademar-scripts/sourcables/load_config

. /usr/lib/kademar-scripts/includes/initrd/config-live-scripts || exit 1

#kademar
#be sure that modules.pcimap exists & modules dep
#if [ ! -e $ROOT/$LKM/modules.dep -o ! -e $ROOT/$LKM/modules.pcimap -o ! -e $ROOT/$LKM/modules.alias ]; then
#	chroot $ROOT depmod -a -m -F /boot/System.map-$KERNEL $KERNEL
#fi


lddgetin(){
file=$1
    if [ -e $file  ]; then
        echo "$file exists, checking if link..."
        while [ -L $file ] 
        do
            truefile=`readlink $file`
            if [ -e $truefile ]; then
                echo "$file points to $truefile, copying that file too"
            else
                truefile=`dirname $file`/$truefile
                if [ -e $truefile ]; then
                    echo "$file points to $truefile, copying that file too"
                else
                    echo "$file is a link to a missing file."
                    break
                fi

            fi

            mkdir -p $2/`echo $(dirname $truefile) | sed s:$ROOT::g`
            cp -a $truefile $2/`echo $(dirname $truefile) | sed s:$ROOT::g`
                
            mkdir -p $2/`echo $(dirname $file) | sed s:$ROOT::g`
            cp -a $file $2/`echo $(dirname $file) | sed s:$ROOT::g`

            file=$truefile
            echo "now checking $file"
        done
       
        echo "$file is a file, copying it..."
        mkdir -p $2/`echo $(dirname $file) | sed s:$ROOT::g`
        cp -a $file $2/`echo $(dirname $file) | sed s:$ROOT::g`
        LIST="$LIST `echo $(dirname $file) | sed s:$ROOT::g`"
fi
        
mkdir -p $2/`echo $(dirname $1) | sed s:$ROOT::g`
cp -a $1 $2/`echo $(dirname $1) | sed s:$ROOT::g`
}

# rcopy is a recursive cp, which copies also symlink's real source
# $1 = source (may be a regular file or symlink)
# $2 = target PARENT
#
rcopy()
{
   debug "rcopy $1 $2"
   CWD=$(pwd)
   if [ "$ROOT" = "" ]; then cd /; else cd $ROOT; fi
   SOURCE="./${1:${#ROOT}}"
   DEST="$2"
   if [ -L "$SOURCE" ]; then
      REALPATH=$(readlink -f "$SOURCE")
      cp --parent -a "$REALPATH" "$DEST"
      ln -sf "$REALPATH" "$DEST/$SOURCE"
   else
      cp --parent -a "$SOURCE" "$DEST"
   fi
   if [ "$?" -ne 0 ]; then
      echo ""
      echo "---------------------------"
      echo "Error occured while trying to copy \"$SOURCE\""
      echo "Possible reason: not enough free space in initrd OR source doesn't exist."
      echo "If space is your issue, see '.config' file to increase size of initrd."
      echo "If source file doesn't exist, it's a big problem. See DOC/requirements.txt"
      echo "---------------------------"
      exit 1
   fi
   cd $CWD
}

# copy file/dir only if it exists, else skip with no error
# $1 = source (may not exist)
# $2 = target PARENT
#
rcopy_ex()
{
   debug "rcopy_ex $1 $2"
   if [ -a "$1" ]; then
      rcopy "$1" "$2"
   fi
}

#kademar
debug()
{
   if [ "$DEBUG" = 1 ]; then
       echo "$1"
   fi
}

##################################################
# Create INITRD image now:

#kademar
MOUNTDIR=$SOURCE_DIR/tmp/initrd_mountdir_$$
INITRD_TREE=$SOURCE_DIR/tmp/initrd_tree_$$
INITRDIMG=$SOURCE_DIR/tmp/initrd-$KERNEL

if [ ! -d $ROOT/$LMK ]; then
   echo "cannot find your kernel modules (*.ko) in $ROOT/$LMK"
   exit 1
fi

if [ "$(ls -1 rootfs/lib)" = "" ]; then
   echo "cannot find essential libc libraries."
   echo "please add ld-linux and libc.so to $(pwd)./rootfs/lib"
   exit 1
fi

debug "creating empty directory $INITRD_TREE"
rm -Rf $INITRD_TREE
mkdir $INITRD_TREE -p

debug "creating directories"
mkdir -p $INITRD_TREE/{etc,dev,bin,mnt,proc,lib,sys,tmp,var/log}

debug "creating some essential devices in rootdisk"
mknod $INITRD_TREE/dev/console c 5 1
mknod $INITRD_TREE/dev/fb0 c 29 0
mknod $INITRD_TREE/dev/null c 1 3
mknod $INITRD_TREE/dev/zero c 1 5
mknod $INITRD_TREE/dev/ram b 1 1
mknod $INITRD_TREE/dev/systty c 4 0
mknod $INITRD_TREE/dev/tty c 5 0
mknod $INITRD_TREE/dev/fuse c 10 229
for i in 1 2 3 4 5 6; do
  mknod $INITRD_TREE/dev/tty$i c 4 $i;
done

debug "copying files to the rootdisk"
touch $INITRD_TREE/etc/{m,fs}tab
#kademar
# cat liblinuxlive | sed -r 's/^LIVECDNAME=.*/LIVECDNAME="'$LIVECDNAME'"/' > $INITRD_TREE/liblinuxlive
cp {linuxrc,cleanup} $INITRD_TREE
chmod ago+x $INITRD_TREE/{linuxrc,cleanup}

#cp -a bootsplash/* $INITRD_TREE

# handle the fuse filesystems here
#
if [ "$USEPOSIXOVL" = "yes" -o "$USENTFS3G" = "yes" ]; then
   cp -a fuse/* $INITRD_TREE
fi

if [ "$USEPOSIXOVL" = "yes" ]; then
   cp -a posixovl/* $INITRD_TREE
fi

if [ "$USENTFS3G" = "yes" ]; then
   cp -a ntfs-3g/* $INITRD_TREE
fi

cp -a rootfs/* $INITRD_TREE

#kademar
[ "`arch`" = "x86_64" ] && arch="_amd64"
cp -a $BUSY_DIR/busybox $INITRD_TREE/bin

#kademar
# build links to busybox's functions from busybox's own help text
for i in $($INITRD_TREE/bin/busybox --help | grep -v Copyright | grep , | tr , " "); do
   ln -s busybox $INITRD_TREE/bin/$i
done

ln -sf bin $INITRD_TREE/sbin

# copy modules.* on initrd
mkdir -p $INITRD_TREE/$LMK
#kademar (added 2>/dev/null)
cp $ROOT/$LMK/modules.{dep,alias,pcimap,ofmap,usbmap,symbols,seriomap,ieee1394map,order} $INITRD_TREE/$LMK 2>/dev/null

# necessary modules and dependency files
#kademar
mkdir -p $INITRD_TREE/$LMK/kernel/fs
if [ ! -e $ROOT/$LMK/kernel/fs/aufs -a ! -e $ROOT/$LMK/kernel/fs/unionfs ]; then
    #make it fail
    rcopy $ROOT/$LMK/kernel/fs/aufs $INITRD_TREE
else

[ -e $ROOT/$LMK/kernel/fs/aufs ] && rcopy $ROOT/$LMK/kernel/fs/aufs $INITRD_TREE
[ -e $ROOT/$LMK/kernel/fs/unionfs ] && rcopy $ROOT/$LMK/kernel/fs/unionfs $INITRD_TREE

fi

rcopy $ROOT/$LMK/kernel/fs/squashfs $INITRD_TREE

# copy filesystem modules, if not directly copied into kernel
rcopy_ex $ROOT/$LMK/kernel/lib/zlib_inflate $INITRD_TREE 2>>$DEBUG
rcopy_ex $ROOT/$LMK/kernel/lib/zlib_deflate $INITRD_TREE 2>>$DEBUG
rcopy_ex $ROOT/$LMK/kernel/drivers/block/loop.* $INITRD_TREE 2>>$DEBUG
rcopy_ex $ROOT/$LMK/kernel/fs/fuse/fuse.* $INITRD_TREE 2>>$DEBUG

rcopy_ex $ROOT/$LMK/kernel/fs/isofs $INITRD_TREE 2>>$DEBUG
rcopy_ex $ROOT/$LMK/kernel/fs/fat $INITRD_TREE 2>>$DEBUG
rcopy_ex $ROOT/$LMK/kernel/fs/vfat $INITRD_TREE 2>>$DEBUG
rcopy_ex $ROOT/$LMK/kernel/fs/ntfs $INITRD_TREE 2>>$DEBUG
rcopy_ex $ROOT/$LMK/kernel/fs/ext3 $INITRD_TREE 2>>$DEBUG
rcopy_ex $ROOT/$LMK/kernel/fs/reiserfs $INITRD_TREE 2>>$DEBUG
rcopy_ex $ROOT/$LMK/kernel/fs/xfs $INITRD_TREE 2>>$DEBUG

# add language support for filesystems
rcopy_ex $ROOT/$LMK/kernel/fs/nls $INITRD_TREE 2>>$DEBUG

# usb modules
rcopy_ex $ROOT/$LMK/kernel/drivers/usb/storage $INITRD_TREE 2>>$DEBUG
rcopy_ex $ROOT/$LMK/kernel/drivers/usb/host/ehci-hcd.* $INITRD_TREE 2>>$DEBUG
rcopy_ex $ROOT/$LMK/kernel/drivers/usb/host/ohci-hcd.* $INITRD_TREE 2>>$DEBUG
rcopy_ex $ROOT/$LMK/kernel/drivers/usb/host/uhci-hcd.* $INITRD_TREE 2>>$DEBUG

# pci modules
rcopy_ex $ROOT/$LMK/kernel/drivers/cdrom $INITRD_TREE 2>>$DEBUG
rcopy_ex $ROOT/$LMK/kernel/drivers/ide $INITRD_TREE 2>>$DEBUG

# pcmcia modules
rcopy_ex $ROOT/$LMK/kernel/drivers/pcmcia/pcmcia_core.* $INITRD_TREE 2>>$DEBUG
rcopy_ex $ROOT/$LMK/kernel/drivers/pcmcia/pcmcia.* $INITRD_TREE 2>>$DEBUG
rcopy_ex $ROOT/$LMK/kernel/drivers/pcmcia/rsrc_nonstatic.* $INITRD_TREE 2>>$DEBUG
rcopy_ex $ROOT/$LMK/kernel/drivers/pcmcia/yenta_socket.* $INITRD_TREE 2>>$DEBUG

#kademar
#firewire modules
rcopy_ex $ROOT/$LMK/kernel/drivers/firewire/firewire-sbp2.ko $INITRD_TREE 2>>$DEBUG
rcopy_ex $ROOT/$LMK/kernel/drivers/firewire/firewire-ohci.ko $INITRD_TREE 2>>$DEBUG
rcopy_ex $ROOT/$LMK/kernel/drivers/ieee1394/sbp2* $INITRD_TREE 2>>$DEBUG
rcopy_ex $ROOT/$LMK/kernel/drivers/ieee1394/ohci* $INITRD_TREE 2>>$DEBUG
rcopy_ex $ROOT/$LMK/kernel/drivers/ata $INITRD_TREE 2>>$DEBUG
rcopy_ex $ROOT/$LMK/kernel/drivers/scsi/sg.ko $INITRD_TREE 2>>$DEBUG

#kademar
#compcache Support
if [ -e "$ROOT/$LMK/kernel/fs/compcache" ]; then
    rcopy_ex $ROOT/$LMK/kernel/fs/compcache $INITRD_TREE 2>>$DEBUG
fi

if [ "$ADDLOCALE" != "" ]; then
   . ./addlocaleslib
   debug "copylocales $ROOT/ $INITRD_TREE $ADDLOCALE"
   copylocales $ROOT/ $INITRD_TREE $ADDLOCALE
   cp $ROOT/etc/locale.alias $INITRD_TREE/etc #kademar
fi

#kademar
cd $INITRD_TREE/lib/
cpio -id --quiet < lib.cpio 2>/dev/null
rm -f lib.cpio

#kademar
#Copy firmwares
mkdir -p $INITRD_TREE/lib/firmware
for i in $WANTED_FIRMWARES
do
    cp -a $ROOT/lib/firmware/$i* $INITRD_TREE/lib/firmware 2>/dev/null
done

# #kademar
# #splashy support
# # sh /usr/lib/kademar-scripts/lddget $ROOT/sbin/splashy $INITRD_TREE
# cp -a $ROOT/sbin/splashy $INITRD_TREE/sbin
# cp -a $ROOT/sbin/splashy_chvt $INITRD_TREE/sbin
# cp -a $ROOT/sbin/splashy_update $INITRD_TREE/sbin
# cp -a $ROOT/etc/splashy $INITRD_TREE/etc
# # cp -a $ROOT/lib/libsplashy* $INITRD_TREE/lib
# cp -a $ROOT/lib/libm.so.6 $INITRD_TREE/lib
# cp -a $ROOT/lib/libm-2.7.so $INITRD_TREE/lib
# mkdir -p $INITRD_TREE/usr/share/splashy/themes
# cp -a $ROOT/usr/share/splashy/themes/kademar $INITRD_TREE/usr/share/splashy/themes
# if [ -f $ROOT/etc/directfbrc ]; then
#     cp $ROOT/etc/directfbrc "$INITRD_TREE/etc"
# fi
# lddgetin $ROOT/sbin/splashy $INITRD_TREE > /dev/null
# lddgetin $ROOT/lib/libsplashycnf.so.1 $INITRD_TREE > /dev/null
# lddgetin $ROOT/lib/libsplashy.so.1 $INITRD_TREE > /dev/null
# lddgetin $ROOT/usr/lib/libglib-2.0.so.0 $INITRD_TREE > /dev/null
# lddgetin $ROOT/usr/lib/libdirectfb-1.0.so.0 $INITRD_TREE > /dev/null
# lddgetin $ROOT/usr/lib/libfusion-1.0.so.0 $INITRD_TREE > /dev/null
# lddgetin $ROOT/usr/lib/libdirect-1.0.so.0 $INITRD_TREE > /dev/null
# lddgetin $ROOT/usr/lib/libpcre.so.3 $INITRD_TREE > /dev/null
# lddgetin $ROOT/lib/libselinux.so.1 $INITRD_TREE > /dev/null
# #         libdl.so.2 => /lib/i686/cmov/libdl.so.2 $INITRD_TREE
# 
# # These are the minimum number of DFB modules we need (I think)
# # DFB_MODS="libdirectfb_fbdev.so libdirectfb_keyboard.so libdirectfbwm_default.so libidirectfbimageprovider_png.so libidirectfbfont_ft2.so libidirectfbfont_default.so"
# # for L in $DFB_MODS; do
# #         I=$(find $ROOT/usr/lib/directfb-1.0-0/ -name $L)
# #         [ -n "$I" ] || continue
# #         mkdir -p $INITRD_TREE/`echo $(dirname $I) | sed s:$ROOT::g`
# #         cp -a $I $INITRD_TREE/`echo $(dirname $I) | sed s:$ROOT::g`
# # done
# # cp -a $ROOT/usr/lib/libglib-2.0.so* $INITRD_TREE/usr/lib
# # cp -a $ROOT/usr/lib/libdirectfb-1* $INITRD_TREE/usr/lib


debug "unpacking all kernel modules for initrd"
find $INITRD_TREE -noleaf -name "*.ko.gz" | xargs -r gunzip

debug "generating module dependency files"
#kademar
depmod -a -m -F /boot/System.map-$KERNEL -b $INITRD_TREE $KERNEL
#depmod -a -b -F /boot/System.map-$KERNEL $KERNEL


debug "compressing usr in initrd"
mksquashfs $INITRD_TREE/usr $INITRD_TREE/usr.lzm >/dev/null 2>/dev/null
chmod ago-x $INITRD_TREE/usr.lzm
rm -Rf $INITRD_TREE/usr/*

debug "creating empty image file for initrd"
dd if=/dev/zero of=$INITRDIMG bs=1024 count=$RAM0SIZE >>$DEBUG 2>&1

debug "making filesystem"
mkfs -t ext2 -F -m 0 -b 1024 -i 1024 $INITRDIMG >>$DEBUG 2>&1
tune2fs -i 120m $INITRDIMG >>$DEBUG 2>&1

debug "creating empty directory $MOUNTDIR"
rm -Rf $MOUNTDIR
mkdir $MOUNTDIR -p

debug "mounting $INITRDIMG to it"
modprobe loop 2>>$DEBUG
mount -o loop -t ext2 $INITRDIMG $MOUNTDIR

#kademar
if [ "$?" -ne 0 ]; then
   for i in `losetup -a | awk ' { print $1 } ' | sed s/://g`
   do
      losetup -d "$i"
   done

   modprobe loop 2>>$DEBUG
   mount -o loop -t ext2 $INITRDIMG $MOUNTDIR
   if [ "$?" -ne 0 ]; then
      echo "Error mounting initrd! Not enough free loop devices?"
      exit 1
   fi
fi

#kademar
cp /usr/lib/kademar-scripts/includes/initrd/liblinuxlive $INITRD_TREE

mkdir -p $INITRD_TREE/usr/share/locale/
cp $ROOT/etc/locale.alias $INITRD_TREE/usr/share/locale/

debug "copying content of $INITRD_TREE to $MOUNTDIR"
rmdir $MOUNTDIR/lost+found
cp -R --preserve $INITRD_TREE/* $MOUNTDIR 2>/dev/null
if [ $? -ne 0 ]; then
   debug "error copying data to mounted initrd. Increase RAM0SIZE"
   echo "Not enough free space in initrd. Edit config-live-scripts and increase RAM0SIZE !"
   umount $MOUNTDIR
   rm $INITRDIMG
   exit 1
fi

debug "unmounting $MOUNTDIR"
umount $MOUNTDIR

debug "gzipping $INITRDIMG"
gzip --best $INITRDIMG

debug "deleting directory $MOUNTDIR"
rmdir $MOUNTDIR

debug "deleting directory $INITRD_TREE"
rm -Rf $INITRD_TREE

debug "$INITRDIMG.gz created"
